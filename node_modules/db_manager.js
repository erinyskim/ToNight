const PAGE_DIVISION = 32;
const TABLE_MEMBER = 'Member';
const TABLE_ADMIN = 'Administrator';

var mysql = require('mysql');


var connection = mysql.createConnection({
    user: 'root',
    database: 'ToNight'
});

connection.connect();


/* 코드 */
var code = function (number) {
    return '{"code":' + number + '}';
};


/**
 *
 * @param p
 * @param count
 * @returns {{nextPage: number, length: number, count: *}}
 */
var getPage = function (p, count) {

    var currentPage = (p + 1) * PAGE_DIVISION;
    var _nextPage = 0;
    var _length = Math.round(count / PAGE_DIVISION);

    if (currentPage < count) {
        _nextPage = p + 1;
    }
    return {nextPage: _nextPage, length: _length, count: count};
}

/**
 * Comma를 찍어서 리턴한다.
 * @param array
 * @returns {string}
 */
var getoStringComma = function (array) {
    var output = '';
    for (i in array) {
        output += "'" + array[i] + "'";
        if (i < array.length - 1) {
            output += ',';
        }
    }
    return output
}


/**
 * Insert
 * @param tableName
 * @param json
 * @param callback
 */
var insert = function (tableName, json, callback) {
    var query = 'INSERT INTO ' + tableName + ' (';
    var keysArrays = [];
    var valueArrays = [];

    for (key in json) {
        var val = json[key];
        keysArrays.push(key);
        valueArrays.push(val);
    }
    query += keysArrays.toString() + ') VALUES (' + getoStringComma(valueArrays) + ')';

    connection.query(query, function (err, rows, fields) {
        callback(err, rows, fields);
    });
}
exports.insert = insert;


var queryLike = function (jsonArray) {
    var query = '';
    for (i in jsonArray) {
        if (i > 0 && i < jsonArray.length) {
            query += ' AND ';
        }
        query += '(' + jsonArray[i].key + ' Like "%' + jsonArray[i].val + '%")';
    }
    return query;
}


/**
 * 검색 like
 * @param tableName
 * @param json
 * @param callback
 */
var like = function (tableName, json, callback) {
    var query = 'SELECT * FROM ' + tableName + ' WHERE ' + queryLike(json);
    connection.query(query, function (err, rows, fields) {
        callback(err, rows, fields);
    });
}
exports.like = like;


/**
 * 검색갯수 제한
 *
 * @param tableName
 * @param json
 * @param page
 * @param callback
 */
var likeLimit = function (tableName, json, page, callback) {
    var query = 'SELECT * FROM ' + tableName + ' WHERE ' + queryLike(json) + 'LIMIT ' + page + ', ' + PAGE_DIVISION;
    connection.query(query, function (err, rows, fields) {
        callback(err, rows, fields);
    });
}
exports.likeLimit = likeLimit;

/**
 * 검색갯수 제한 카운터 확인
 *
 * @param tableName
 * @param json
 * @param callback
 */
var countLike = function (tableName, json, callback) {
    var query = 'SELECT COUNT(*) FROM ' + tableName + ' WHERE ' + queryLike(json);
    connection.query(query, function (err, rows, fields) {
        callback(parseInt(rows[0]['COUNT(*)']));
    });
};
exports.countLike = countLike;


/**
 * Count Table
 * @param tableName
 * @param callback
 */
var count = function (tableName, callback) {
    var query = 'SELECT COUNT(*) FROM ' + tableName;
    connection.query(query, function (err, rows, fields) {
        callback(parseInt(rows[0]['COUNT(*)']));
    });
}
exports.count = count;

/**
 * 전체 선택
 *
 * @param tableName
 * @param callback
 */
var selectAll = function (tableName, callback) {
    var query = 'SELECT * FROM ' + tableName;
    connection.query(query, function (err, rows, fields) {
        callback(err, rows, fields);
    });
};
exports.selectAll = selectAll;

/**
 * 맴버 등록
 * @param _id
 * @param _pw
 * @param _name
 * @param _phonenumber
 * @param callback
 */
var insertAdministrator = function (_id, _pw, _name, _phonenumber, callback) {
    var json = {id: _id, pw: _pw, name: _name, phonenumber: _phonenumber};
    insert(TABLE_ADMIN, json, function (err, rows, fields) {
        if (err) {

            if (err.message.search('PRIMARY') >= 1) {
                callback(code(409));
                return;
            }
            callback(code(0));
        } else {
            callback(code(200));
        }
    });
}
exports.insertAdministrator = insertAdministrator;


/**
 * 맴버 등록
 * @param _id
 * @param _pw
 * @param _adress
 * @param _rgnCd
 * @param _lat
 * @param _lng
 * @param _phonenumber
 * @param _category
 * @param _cf
 * @param _shopname
 * @param _message
 * @param _homepage
 * @param _logo
 * @param _tag
 * @param _registrant
 * @param callback
 */
var insertMember = function (_id, _pw, _adress, _rgnCd, _lat, _lng, _phonenumber, _category, _cf, _shopname, _message, _homepage, _logo, _tag, _registrant, callback) {
    var json = {id: _id, pw: _pw, adress: _adress, rgnCd: _rgnCd, lat: _lat, lng: _lng, phonenumber: _phonenumber, category: _category, cf: _cf, shopname: _shopname, message: _message, homepage: _homepage, logo: _logo, tag: _tag, registrant: _registrant};
    insert(TABLE_MEMBER, json, function (err, rows, fields) {
        if (err) {
            if (err.message.search('PRIMARY') >= 1) {
                callback(code(409));
                return;
            }
            callback(code(0));
        } else {
            callback(code(200));
        }
    });
}
exports.insertMember = insertMember;


/**
 * 현재 등록된 맴버 리스트 전부다
 * @param callback
 */
var getMemberAll = function (callback) {
    selectAll(TABLE_MEMBER, function (err, rows, fields) {
        if (err) {
            callback(code(404));
        } else {

            var output = {result: rows, page: getPage(1, rows.length), code: 200 };
            callback(JSON.stringify(output));
        }
    });
}
exports.getMemberAll = getMemberAll;


/**
 * Member Like 검색
 * @param json
 * @param page
 * @param callback
 */
var findMemberByLike = function (json, page, callback) {
    likeLimit(TABLE_MEMBER, json, page, function (err, rows, fields) {
        if (err) {
            callback(code(0));
        } else {
            countLike(TABLE_MEMBER, json, function (count) {
                callback({result: rows, page: getPage(page, count), code: 200});
            });
        }
    });
}
exports.findMemberByLike = findMemberByLike;


/**
 * Member 검색
 * @param id
 * @param callback
 */
var findMember = function (id, callback) {

};
exports.findMember = findMember;



//INSERT INTO `ToNight`.`BookMark` (`phonnumber`, `member`) VALUES ('01032571999', 'tes555');
